exports.content = () =>{ return `

// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

contract Chat {
    uint public counter;
    address owner;

    modifier onlyOwner{
        require(msg.sender == owner);
        _; // Close Modifier
    }

    struct Message 
    { 
        address to;
        string mess;
        uint value;
        uint blocktime;
    }

    mapping(address => Message[]) public chatHistory;
    mapping(address => uint) public chatCounter;

    constructor() {
        counter = 0;
        owner = msg.sender;
    }

    function addMessage(address _to, string memory _message) public payable{
        counter +=1;
        chatCounter[msg.sender]+=1;
        chatHistory[msg.sender].push(Message(_to,_message, msg.value,block.timestamp));
        payable(_to).transfer(msg.value);
    }


    // Transfer money in the contract.

    function garbage() public onlyOwner payable{
        payable(owner).transfer(address(this).balance);
    }

}`}

exports.abi = () => {
    return [
        {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "string",
                    "name": "_message",
                    "type": "string"
                }
            ],
            "name": "addMessage",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "chatCounter",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "chatHistory",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "string",
                    "name": "mess",
                    "type": "string"
                },
                {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "blocktime",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "counter",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "garbage",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        }
    ]
  };
  
  exports.bytecode = () => {
    return("608060405234801561001057600080fd5b506000808190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a4c806100686000396000f3fe60806040526004361061004a5760003560e01c806361bc221a1461004f57806368c8063b1461007a578063906c22b5146100ba578063bc7aa54d146100f7578063fd38b21a14610113575b600080fd5b34801561005b57600080fd5b5061006461011d565b6040516100719190610772565b60405180910390f35b34801561008657600080fd5b506100a1600480360381019061009c919061068f565b610123565b6040516100b19493929190610726565b60405180910390f35b3480156100c657600080fd5b506100e160048036038101906100dc9190610606565b610218565b6040516100ee9190610772565b60405180910390f35b610111600480360381019061010c9190610633565b610230565b005b61011b610404565b005b60005481565b6002602052816000526040600020818154811061013f57600080fd5b9060005260206000209060040201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610189906108d3565b80601f01602080910402602001604051908101604052809291908181526020018280546101b5906108d3565b80156102025780601f106101d757610100808354040283529160200191610202565b820191906000526020600020905b8154815290600101906020018083116101e557829003601f168201915b5050505050908060020154908060030154905084565b60036020528060005260406000206000915090505481565b600160008082825461024291906107ff565b925050819055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461029991906107ff565b92505081905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200134815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906103a29291906104c9565b50604082015181600201556060820151816003015550508173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156103ff573d6000803e3d6000fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045e57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156104c6573d6000803e3d6000fd5b50565b8280546104d5906108d3565b90600052602060002090601f0160209004810192826104f7576000855561053e565b82601f1061051057805160ff191683800117855561053e565b8280016001018555821561053e579182015b8281111561053d578251825591602001919060010190610522565b5b50905061054b919061054f565b5090565b5b80821115610568576000816000905550600101610550565b5090565b600061057f61057a846107b2565b61078d565b90508281526020810184848401111561059b5761059a6109c8565b5b6105a6848285610891565b509392505050565b6000813590506105bd816109e8565b92915050565b600082601f8301126105d8576105d76109c3565b5b81356105e884826020860161056c565b91505092915050565b600081359050610600816109ff565b92915050565b60006020828403121561061c5761061b6109d2565b5b600061062a848285016105ae565b91505092915050565b6000806040838503121561064a576106496109d2565b5b6000610658858286016105ae565b925050602083013567ffffffffffffffff811115610679576106786109cd565b5b610685858286016105c3565b9150509250929050565b600080604083850312156106a6576106a56109d2565b5b60006106b4858286016105ae565b92505060206106c5858286016105f1565b9150509250929050565b6106d881610855565b82525050565b60006106e9826107e3565b6106f381856107ee565b93506107038185602086016108a0565b61070c816109d7565b840191505092915050565b61072081610887565b82525050565b600060808201905061073b60008301876106cf565b818103602083015261074d81866106de565b905061075c6040830185610717565b6107696060830184610717565b95945050505050565b60006020820190506107876000830184610717565b92915050565b60006107976107a8565b90506107a38282610905565b919050565b6000604051905090565b600067ffffffffffffffff8211156107cd576107cc610994565b5b6107d6826109d7565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061080a82610887565b915061081583610887565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561084a57610849610936565b5b828201905092915050565b600061086082610867565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156108be5780820151818401526020810190506108a3565b838111156108cd576000848401525b50505050565b600060028204905060018216806108eb57607f821691505b602082108114156108ff576108fe610965565b5b50919050565b61090e826109d7565b810181811067ffffffffffffffff8211171561092d5761092c610994565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6109f181610855565b81146109fc57600080fd5b50565b610a0881610887565b8114610a1357600080fd5b5056fea2646970667358221220e401032600df8f30631e935428e09c7c3c50cebe5cd355f2d13f491faf80387064736f6c63430008070033")
  }